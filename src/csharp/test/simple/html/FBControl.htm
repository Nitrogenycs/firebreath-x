<!--
    Auto-generated test-site
-->
<html>
<head>
<title>test page for object fbcontrol</title>
</head>
    <script type="text/javascript">
        function plugin0()
        {
            return document.getElementById('plugin0');
        }
        plugin = plugin0;
        function addEvent(obj, name, func)
        {
            if (window.addEventListener) {
                obj.addEventListener(name, func, false); 
            } else {
                obj.attachEvent("on"+name, func);
            }
        }
        
        function load()
        {
            addEvent(plugin(), 'fired', function(x){
                alert('onfired() from load(): '+x)
            });
        }
        function pluginLoaded() {
            alert("Plugin loaded!");
        }
        
        function addTestEvent()
        {
            addEvent(plugin(), 'fired', function(x){
                alert('onfired(): '+x)
            });
        }
        
        function testEvent()
        {
            plugin().testEvent('test stuff');
        }
        
        function pluginValid()
        {
            alert(plugin().valid);
        }

        function loadExtension()
        {
            var path = 'C:\\DCSDK\\External\\WebPlayer\\firebreath-x\\src\\csharp\\makefiles\\SimpleTest\\bin\\Release\\SimpleTest.dll';
            var klass = 'TestApp.Launcher';
            var method = 'launch';
            var options = 'Hello hello';
            var result = plugin().loadExtension(path, klass, method, options);
            
            var assert = function(condition, msg) {
                if ( !condition ) {
                    alert( 'Error ' + msg );
                }
            };
            
            var assertVal = function(obj, field, value) {
                var val = obj[field];
                assert( val == value, 'Field ' + field + ' was expected to be ' + value + ', but got ' + val + ' (' + typeof(val) + ')' );
            };
            
            var assertRaises = function(callable) {
                try
                {
                    callable()
                }
                catch (e)
                {
                    return;
                }
                alert( 'Error, callable did not raise exception:\n\n' + callable );
            };

            try
            {
                // accessing and converting basic types C# -> JS
                assertVal( result, 'someBool', true );
                assertVal( result, 'someInt', 42 );
                assertVal( result, 'someUInt', 42 );
                assert( Math.abs(result.someDouble-42.1) < 0.001, 'wrong double' );
                assert( Math.abs(result.someFloat-42.2) < 0.001, 'wrong float' );
                assertVal( result, 'someString', 'this is a c# string' );
                assertVal( result, 'someShort', 42 );
                assertVal( result, 'someUShort', 42 );
                assertVal( result, 'someChar', 42 );
                assertVal( result, 'someByte', 42 );
                assertVal( result, 'someInt64', 42 );
                assertVal( result, 'someUInt64', 42 );
                assertVal( result, 'someNull', null );
                assertVal( result, 'someEmpty', undefined );
                assert( result.someObject != null, 'wrong object' );
                assert( result.someType != null, 'wrong type' );
                assertVal( result.someList, 'Count', 3 );
                assertVal( result.someDict, 'Count', 2 );
                assertVal( result.someList, 1, 'Hello' );
                assertVal( result.someList, 77, undefined );
                assertVal( result.someList, '77', undefined );
                assertVal( result.someDict, 'item2', 'value2' );
                assertVal( result.someDict, 'item66', undefined );
                assertVal( result.someDict, 66, undefined );
    
                // accessing property of an object
                assertVal( result.someObject, 'data', '123' );
                
                // accessing non-existent property
                assertVal( result, 'idonotexist', undefined );
    
                // enumerating all members and getting their values
                var members = [];
                for (x in result.someObject) members.push( [x, result.someObject[x]] );
                alert( members.length + ' member(s): ' + members );
    
                // method call on an object
                result.someObject.ShowMessage('Hello from JS');
                // creating a new instance of an object (doesn't use 'new')
                var newObject = result.someType();
                
                // setting property
                assertVal( newObject, 'changeThis', '123' );
                newObject.changeThis = '234';
                assertVal( newObject, 'changeThis', '234' );
                
                // setting non-existent property
                assertVal( newObject, 'idonotexist', undefined );
                // should this raise an exception or should this work and create the property?
                // hmm, it seems SetProperty is never called for this one, so no idea how to intercept this
                assertRaises( function() { newObject.idonotexist = 123; } );
                assertVal( newObject, 'idonotexist', undefined );
    
                // setting value with wrong type
                assertVal( newObject, 'changeThis', '234' );
                assertRaises( function() { newObject.changeThis = 123 } );
                assertVal( newObject, 'changeThis', '234' );
    
                // setting read-only value
                assertVal( newObject, 'data', '123' );
                assertRaises( function() { newObject.data = '666' } );
                assertVal( newObject, 'data', '123' );

                // testing static properties
                objA = result.someType();
                objB = result.someType();
                assertVal( objA, 'staticInt', 123 );
                assertVal( objB, 'staticInt', 123 );
                objA.staticInt = 234;
                assertVal( objA, 'staticInt', 234 );
                assertVal( objB, 'staticInt', 234 );
                
                // method objects
                var obj = result.someType();
                obj.changeThis = '100';
                assertVal( obj, 'changeThis', '100' );
                var func = obj.testMethodObject;
                var result = func();
                assert( result == '100', 'Method object error' );

                alert('All tests completed successfully');
            }
            catch (e)
            {
                alert('Unexpected exception ' + e)
                alert('Some tests had errors');
            }
            
            // todo: remove memory leaks
            // todo: unload assembly via AppDomain.Unload(domain). But what triggers this?
            //         When rootApi gone? Might not be sufficient if something still requires the AppDomain that's in some other jsapi. Manually call Unload?
            // todo: add support for method objects
            // todo: DeleteProperty. Constructor with new.
            // todo: dynamic on c# side to access js properties
            // todo: security checks for loaded dll
            // todo: create different JSAPI classes for objects, method objects, types and everything else that's special-cased atm

        }
    </script>
<body onload="load()">
<object id="plugin0" type="application/x-fbxsimpletestplugincsharp" width="300" height="300">
    <param name="onload" value="pluginLoaded" />
</object><br />
<a href="#" onclick="javascript:addTestEvent()">set event handler</a> <br />
<a href="#" onclick="javascript:testEvent()">Fire event</a> <br />
<a href="#" onclick="javascript:pluginValid()">alert plugin valid</a> <br />
<a href="#" onclick="javascript:loadExtension()">load extension</a> <br />
</body>
</html>
